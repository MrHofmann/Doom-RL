#!/usr/bin/python

import pickle
import matplotlib as mpl
import numpy as np
from matplotlib import pyplot as plt
import argparse
from matplotlib.lines import Line2D
from random import shuffle

def marker():
    markers = ["o", 
            "v", 
            "*", 
            "<", 
            "h", 
            ">", 
            "p", 
            "s",
            "^"]
    while True:
        for m in markers:
            yield m

def color():
    colors = ["gray", 
            "tomato", 
            "orange", 
            "gold", 
            "limegreen", 
            "blue", 
            "darkviolet",
            "black",
            "ivory"]
    colors1 = ["gray",
            "goldenrod",
            "darkkhaki",
            "gold",
            "yellow",
            "darkgoldenrod",
            ]   
    colors2 = [#"gray", 
            #"tomato", 
            #"orange", 
            "gold", 
            #"limegreen", 
            #"blue", "darkviolet", 
            "ivory"]
    while True:
        for c in colors:
            yield c

def label():
    labels = ["DQN", 
            "DoubleDQN", 
            "DuelingDQN", 
            "NStepDQN", 
            "PrioritizedDQN", 
            "CategoricalDQN",
            "NoisyDQN",
            "AdvancedDQN",
            "RainbowDQN"]
    labels_s = ["DQN", 
            #"DvostrukaDQN", 
            "DuelingDQN", 
            #"VišekoračnaDQN", 
            "PrioritizovanaDQN", 
            #"NoisyDQN", "DistributionalDQN",
            "NaprednaDQN"]
    labels1 = ["1Step (DQN)", 
            "2Step", 
            "3Step", 
            "4Step", 
            "5Step", 
            "6Step"]
    labels1_s = ["1Korak (DQN)", 
            "2Koraka", 
            "3Koraka", 
            "4Koraka", 
            "5Koraka", 
            "6Koraka"]
    labels2 = [#"NDouble", 
            #"NDueling", 
            "NNstep-NDouble", 
            #"NPrioritizied", 
            #"5Step", "6Step",
            "AdvancedDQN"]
    labels2_s = [#"BezDvostrukog", 
            #"BezDueling",
            #"BezVišekoračnog",
            "BezVišekoračnogIDvostrukog", 
            #"BezPrioritizovane", 
            #"5Step", "6Step",
            "NaprednaDQN"]

    while True:
        for l in labels:
            yield l

def width():
    widths = [1.5, 
            1.5, 
            1.5, 
            1.5, 
            1.5,
            1.5, 
            1.5,
            1.5,
            3.0]
    widths2 = [1.5, 
            1.5, 
            1.5, 
            3.0, 
            1.5, 1.5,
            #3.0
            ]
    while True:
        for w in widths:
            yield w

marker = marker()
color = color()
label = label()
width = width()

mpl.style.use('ggplot')

parser = argparse.ArgumentParser(description='This scprit plots results generated by learn.py.')
parser.add_argument('files', type=str, nargs="+", default=None, help='file(s) with results')
group = parser.add_mutually_exclusive_group()
group.add_argument('--stats', "-s", metavar='<STAT>', dest="stats", type=str, nargs="+",
                   default=["mean"],
                   help="plot fiven stats e.g. mean, train_mean, std ...")
group.add_argument('--list', dest='list', action='store_const',
                   const=True, default=False,
                   help='lists available stats for all files and exit')
group.add_argument('--x-resolution', "-r", metavar='<X_RESOLUTION>', dest="x_res", type=str, nargs=1,
                   default=[1000000],
                   help="interval for x axis in number of training actions (default: 1000000)")
args = parser.parse_args()

show_plot = False
x_res = np.float(args.x_res[0])
for filename in args.files:
    d = pickle.load(open(filename, "rb"))
    if args.list:
        print(filename)
        for term in d:
            if type(term) == type(list()):
                print("\t", term)
    else:
        mil_steps = np.array(d["actions"]) / x_res

        for stat in args.stats:
            if stat not in d:
                print(stat, " stat not found in", filename)
                continue
            #label = "IntegratedDQN"
            #if len(args.stats) > 1:
            #    label += "_" + stat.upper()
            plt.plot(mil_steps, d[stat], marker=next(marker), label=next(label), linewidth=next(width), color=next(color))
            show_plot = True

if show_plot:
    plt.xlabel('$10^6$  koraka')
    plt.ylabel('prosečna ukupna nagrada')
    legend = plt.legend(loc='upper left', fancybox=True, shadow=True).set_draggable(True)
    plt.show()
else:
    print ("No valid file/stat. Exiting.")
# plt.savefig("defend_the_line.pdf")
